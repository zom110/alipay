package com.sdhoo.pdloan.payctr.busi.yibaodf.enums;


/**
 * 
 * 易宝代付系统返回码
 * @author SDPC_LIU(LiuJianbin)
 * @date 2018年4月20日
 */
public enum YibaodfErrorCodeEnum {

    BAC001("BAC001","已接收"), // 

	BAC002001("BAC002001","没有证书"),
	BAC002002("BAC002002","登录名和证书不匹配"),
	BAC002003("BAC002003","证书用户名格式错误"),
	BAC002004("BAC002004","证书起始日志格式错误"),
	BAC002005("BAC002005","证书截止日期格式错误"),
	BAC002006("BAC002006","证书序列号格式错误"),
	BAC002008("BAC002008","证书已过期"),
	BAC002009("BAC002009","证书验证失败"),
	BAC000010("BAC000010","总金额与明细合计有误"),
	BAC000011("BAC000011","总比数与明细合计有误"),
	BAC000012("BAC000012","商户 ip 不合法（ip 位于黑名单）"),
	BAC000013("BAC000013","商户 ip 不匹配|商户 ip 不合法"),
	BAC000014("BAC000014","打款文件已处理，请勿重复提交"),
	BAC000015("BAC000015","存在重复打款记录"),
	BAC000016("BAC000016","签名验证失败"),
	BAC000017("BAC000017","打款总额超限"),
	BAC000018("BAC000018","打款总笔数超限"),
	BAC000019("BAC000019","单笔限额超限"),
	BAC000020("BAC000020","商户不存在"),
	BAC000021("BAC000021","商户状态不正常"),
	BAC000022("BAC000022","收款卡号有误（或者卡号在系统黑名单）"),
	BAC000023("BAC000023","打款单笔处理处理失败"),
	BAC000031("BAC000031","省市有误"),
	BAC000032("BAC000032","未开通操作权限(批量打款,查询)"),
	BAC000033("BAC000033","CA 证书有误"),
	BAC000034("BAC000034","批次号不合法或重复"),
	BAC000035("BAC000035","订单号不合法或重复"),
	BAC000036("BAC000036","不支持该银行编码和银行名称"),
	BAC000037("BAC000037","金额不合法"),
	BAC000038("BAC000038","非法的账户名称"),
	BAC000039("BAC000039","手续费收取方式不合法"),
	BAC000040("BAC000040","邮箱格式不正确"),
	BAC000041("BAC000041","非法的手机号"),
	BAC000042("BAC000042","留言字数超过限制"),
	BAC000043("BAC000043","加急参数非法或者不支持该银行的加急"),
	BAC000044("BAC000044","商户未开启委托结算功能"),
	BAC000045("BAC000045","商户账户已冻结"),
	BAC000046("BAC000046","商户可用打款余额不足"),
	BAC000047("BAC000047","请求报文 xml 格式有误"),
	BAC000048("BAC000048","查询记录不存在"),
	BAC000049("BAC000049","输入页码为 0 或未输入"),
	BAC000051("BAC000051","必填项不能为空"),
	BAC000052("BAC000052","日期转换错误"),
	BAC000053("BAC000053","数据签名失败"),
	BAC000054("BAC000054","时间段或批次号至少添一项"),
	BAC000055("BAC000055","查询日期不能在当前日期之后"),
	BAC000056("BAC000056","未开通结算款汇入"),
	BAC000057("BAC000057","请求 xml 报文里的 cmd 参数为空"),
	BAC000058("BAC000058","参数 必填项,不能为空"),
	BAC000059("BAC000059","日期格式不合法"),
	BAC000060("BAC000060","is_Repay 参数不合法"),
	BAC000061("BAC000061","参数不合法"),
	BAC000062("BAC000062","起始日期不能大于结束日期"),
	BAC000063("BAC000063","时间间隔不能超过 7 天"),
	BAC000064("BAC000064","商户未开通交易限额业务"),
	BAC000066("BAC000066","金额超过打款单笔限额"),
	BAC000067("BAC000067","日累计限额超过日限额"),
	BAC000068("BAC000068","月累计限额超过月限额"),
	BAC000069("BAC000069","接口名称不存在"),
	BAC000070("BAC000070","该商户关系不存在"),
	BAC000071("BAC000071","该机构无下级机构"),
	BAC000074("BAC000074","报文非法"),
	BAC000075("BAC000075","支行信息和省市信息不能同时为空"),
	BAC000076("BAC000076","全部打款记录未通过校验"),
	BAC000077("BAC000077","不支持该银行对公打款"),
	BAC000078("BAC000078","bank_Code 和 bank_Name 不能同时为空"),
	BAC000079("BAC000079","金额不足以支付手续费"),
	BAC000080("BAC000080","未开通周转易"),
	BAC000081("BAC000081","未开通周转易+"),
	BAC000082("BAC000082","未开通对公出款"),
	BAC000083("BAC000083","未开通对私出款"),
	BAC000084("BAC000084","重复预约"),
	BAC000085("BAC000085","非预约期"),
	BAC000086("BAC000086","超过预约额度或易宝备款金额，不能实"),
	BAC000087("BAC000087","账户非法或余额不足预约缴费失败"),
	BAC000088("BAC000088","预约金额超限"),
	BAC000089("BAC000089","未预约"),
	BAC000090("BAC000090","已缴费不能修改"),
	BAC000091("BAC000091","当前时间不可预约"),
	BAC000092("BAC000092","账户余额不足"),
	BAC000093("BAC000093","此银行额度不足，建议切换其它银行"),
	BAC000095("BAC000095","开户行所在省不能为空或不合法"),
	BAC000096("BAC000096","开户行所在市不能为空或不合法"),
	BAC000097("BAC000097","开户银行不能为空"),
	BAC000098("BAC000098","开户银行不合法"),
	BAC000099("BAC000099","开户银行全称不合法"),
	BAC000100("BAC000100","开户银行全称不能为空"),
	BAC001001("BAC001001","未开通日结通"),
	BAC001002("BAC001002","出款银行卡号非绑定银行卡"),
	BAC001003("BAC001003","代理商额度不足"),
	BAC001004("BAC001004","日结通总额度不足"),
	BAC001005("BAC001005","日结通对私额度不足"),
	BAC001006("BAC001006","收款方银行为非实时到账银行"),
	BAC001007("BAC001007","未开通非工作日加急版"),
	BAC001008("BAC001008","未开通工作日加急版"),
	BAC001009("BAC001009","未开通非工作日普通版"),
	BAC001010("BAC001010","未开通工作日普通版"),
	BAC001011("BAC001011","打款状态码不合法"),
	BAC009999("BAC009999","系统异常， 但不意味着打款接收失败，应通过查询接口查询当次打款请求的接"),
	;

	private String code ;
	private String name ;

	public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    YibaodfErrorCodeEnum(String code , String name ){
		this.code = code ;
		this.name = name;
	}


	/**
	 * 根据编码获取枚举
	 * @param code
	 * @return
	 */
	public static YibaodfErrorCodeEnum getByCode(String code){
		for(YibaodfErrorCodeEnum tmpEnum : values() ){
			if(tmpEnum.getCode().equals(code) ){
				return tmpEnum ;
			}
		}
		return null ;
	}
	
	/**
	 * CODE是否符合
	 * @param code
	 * @return
	 */
	public static boolean isCodeValid(String code){
		for(YibaodfErrorCodeEnum tmpEnum : values() ){
			if(tmpEnum.getCode().equals(code) ){
				return true ;
			}
		}
		return false ;
	}
	
}
